{"ast":null,"code":"import _classCallCheck from \"/Users/arvindyalavarti/dev/YHack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/arvindyalavarti/dev/YHack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/arvindyalavarti/dev/YHack/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/arvindyalavarti/dev/YHack/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/arvindyalavarti/dev/YHack/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/arvindyalavarti/dev/YHack/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/arvindyalavarti/dev/YHack/src/components/Calendar.js\";\nimport React, { Component } from \"react\";\nimport { Grid, Button, Input, Icon } from \"semantic-ui-react\";\nimport CalendarHeatmap from \"react-calendar-heatmap\";\nimport ReactTooltip from \"react-tooltip\";\nimport Modal from \"react-responsive-modal\";\nimport \"./../assets/Main.css\";\nvar today = new Date();\nvar monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Calendar, _Component);\n\n  function Calendar(props) {\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calendar).call(this, props));\n    _this.state = {\n      show: false,\n      currentDate: null,\n      proposedValue: null,\n      actualValue: null,\n      date: null,\n      startDate: _this.getStartDate(),\n      endDate: _this.getEndDate(),\n      values: _this.getValues()\n    };\n    _this.openModal = _this.openModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: \"getStartDate\",\n    value: function getStartDate() {\n      return new Date(\"2018-12-01\");\n    }\n  }, {\n    key: \"getEndDate\",\n    value: function getEndDate() {\n      return new Date(\"2018-12-31\");\n    }\n  }, {\n    key: \"getValues\",\n    value: function getValues() {\n      var _this2 = this;\n\n      return this.getRange(31).map(function (index) {\n        return {\n          date: _this2.shiftDate(today, index),\n          count: 0\n        };\n      });\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(curValue) {\n      console.log(curValue);\n    }\n  }, {\n    key: \"getDateData\",\n    value: function getDateData(date) {\n      return \"\".concat(monthNames[date.getMonth()], \" \").concat(date.getDate(), \", \").concat(date.getFullYear());\n    }\n  }, {\n    key: \"shiftDate\",\n    value: function shiftDate(date, numDays) {\n      var newDate = new Date(date);\n      newDate.setDate(newDate.getDate() + numDays);\n      return newDate;\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(count) {\n      return Array.from({\n        length: count\n      }, function (_, i) {\n        return i;\n      });\n    }\n  }, {\n    key: \"getRandomInt\",\n    value: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n  }, {\n    key: \"openModal\",\n    value: function openModal() {\n      this.setState({\n        show: true\n      });\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.setState({\n        show: false\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"mainContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"calendar-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(CalendarHeatmap, {\n        startDate: this.state.startDate,\n        endDate: this.state.endDate,\n        values: this.state.values,\n        showOutOfRangeDays: true,\n        classForValue: function classForValue(value) {\n          if (!value) {\n            return \"color-null\";\n          } else if (value.count == 0) {\n            return \"color-empty\";\n          }\n\n          return \"color-gitlab-\".concat(value.count);\n        },\n        tooltipDataAttrs: function tooltipDataAttrs(value) {},\n        onClick: function onClick(value) {\n          _this3.setState({\n            currentDate: _this3.getDateData(value.date)\n          });\n\n          _this3.setState({\n            date: value.getDate()\n          });\n\n          _this3.openModal();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })), React.createElement(ReactTooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        open: this.state.show,\n        onClose: this.closeModal,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"modalHeading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Update Mood!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \" Update your mood for \", this.state.currentDate, \" \"), React.createElement(Input, {\n        icon: \"users\",\n        placeholder: \"Enter Number...\",\n        onChange: function onChange(event) {\n          _this3.setState({\n            actualValue: event.target.value\n          });\n\n          console.log(_this3.state.proposedValue);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.updateValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Update\"))));\n    }\n  }]);\n\n  return Calendar;\n}(Component);\n\nexport default Calendar;","map":{"version":3,"sources":["/Users/arvindyalavarti/dev/YHack/src/components/Calendar.js"],"names":["React","Component","Grid","Button","Input","Icon","CalendarHeatmap","ReactTooltip","Modal","today","Date","monthNames","Calendar","props","state","show","currentDate","proposedValue","actualValue","date","startDate","getStartDate","endDate","getEndDate","values","getValues","openModal","bind","closeModal","getRange","map","index","shiftDate","count","curValue","console","log","getMonth","getDate","getFullYear","numDays","newDate","setDate","Array","from","length","_","i","min","max","Math","floor","random","setState","value","getDateData","event","target","updateValue"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid, Button, Input, Icon } from \"semantic-ui-react\";\nimport CalendarHeatmap from \"react-calendar-heatmap\";\nimport ReactTooltip from \"react-tooltip\";\nimport Modal from \"react-responsive-modal\";\n\nimport \"./../assets/Main.css\";\n\nconst today = new Date();\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n      currentDate: null,\n      proposedValue: null,\n      actualValue: null,\n      date: null,\n      startDate: this.getStartDate(),\n      endDate: this.getEndDate(),\n      values: this.getValues()\n    };\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  getStartDate() {\n    return new Date(\"2018-12-01\");\n  }\n\n  getEndDate() {\n    return new Date(\"2018-12-31\");\n  }\n\n  getValues() {\n    return this.getRange(31).map(index => {\n      return {\n        date: this.shiftDate(today, index),\n        count: 0\n      };\n    });\n  }\n\n  updateValue(curValue) {\n    console.log(curValue);\n  }\n\n  getDateData(date) {\n    return `${\n      monthNames[date.getMonth()]\n    } ${date.getDate()}, ${date.getFullYear()}`;\n  }\n\n  shiftDate(date, numDays) {\n    const newDate = new Date(date);\n    newDate.setDate(newDate.getDate() + numDays);\n    return newDate;\n  }\n\n  getRange(count) {\n    return Array.from({ length: count }, (_, i) => i);\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  openModal() {\n    this.setState({ show: true });\n  }\n\n  closeModal() {\n    this.setState({ show: false });\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <div className=\"mainContainer\">\n        <Grid>\n          <div className=\"calendar-container\">\n            <CalendarHeatmap\n              startDate={this.state.startDate}\n              endDate={this.state.endDate}\n              values={this.state.values}\n              showOutOfRangeDays={true}\n              classForValue={value => {\n                if (!value) {\n                  return \"color-null\";\n                } else if (value.count == 0) {\n                  return \"color-empty\";\n                }\n                return `color-gitlab-${value.count}`;\n              }}\n              tooltipDataAttrs={value => {}}\n              onClick={value => {\n                this.setState({ currentDate: this.getDateData(value.date) });\n                this.setState({ date: value.getDate()})\n                this.openModal();            \n              }}\n            />\n          </div>\n          <ReactTooltip />\n\n          <Modal open={this.state.show} onClose={this.closeModal} center>\n            <h2 className=\"modalHeading\">Update Mood!</h2>\n            <p> Update your mood for {this.state.currentDate} </p>\n            <Input\n              icon=\"users\"\n              placeholder=\"Enter Number...\"\n              onChange={event => {\n                this.setState({ actualValue: event.target.value });\n                console.log(this.state.proposedValue);\n              }}\n            />\n            <br />\n            <br />\n            <Button onClick={this.updateValue}>Update</Button>\n          </Modal>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}